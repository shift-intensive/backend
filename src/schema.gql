# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BaseResponse {
  reason: String
  success: Boolean!
}

enum BodyType {
  COUPE
  HATCHBACK
  SEDAN
  SUV
}

enum Brand {
  AUDI
  BMW
  MERCEDES
}

input CalculateDeliveryPackageDto {
  height: Float!
  length: Float!
  weight: Float!
  width: Float!
}

input CalculateDeliveryPointDto {
  latitude: Float!
  longitude: Float!
}

type CalculateDeliveryResponse {
  options: [DeliveryOption!]!
  reason: String
  success: Boolean!
}

type Car {
  available: Boolean!
  bodyType: BodyType!
  brand: Brand!
  color: Color!
  id: String!
  imageUrl: String!
  location: String!
  minRentalDays: Float
  name: String!
  price: Float!
  steering: String!
  transmission: Transmission!
}

type CarsPaginatedResponse {
  data: [Car!]!
  meta: PaginationMeta!
  reason: String
  success: Boolean!
}

type CinemaOrder {
  _id: String!
  filmName: String!
  orderNumber: Float!
  person: FilmPerson!
  status: CinemaOrderStatus!
  tickets: [Ticket!]!
}

input CinemaOrderInput {
  _id: String!
  filmName: String!
  orderNumber: Float!
  person: FilmPersonInput!
  status: CinemaOrderStatus!
  tickets: [TicketInput!]!
}

enum CinemaOrderStatus {
  CANCELED
  PAYED
}

type CinemaOrdersResponse {
  orders: [CinemaOrder!]!
  reason: String
  success: Boolean!
}

enum Color {
  BLACK
  BLUE
  RED
  SILVER
  WHITE
}

type Country {
  code: String!
  code2: String!
  id: Float!
  name: String!
}

input CountryInput {
  code: String!
  code2: String!
  id: Float!
  name: String!
}

input CreateDeliveryOrderDeliveryOptionDto {
  days: Float!
  id: String!
  name: String!
  price: Float!
  type: DeliveryOptionType!
}

input CreateDeliveryOrderPersonDto {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

input CreateDeliveryOrderPointDto {
  id: String!
  latitude: Float!
  longitude: Float!
  name: String!
}

input CreateDeliveryOrderReceiverAddressDto {
  apartment: String!
  comment: String
  house: String!
  isNonContact: Boolean
  street: String!
}

input CreateDeliveryOrderSenderAddressDto {
  apartment: String!
  comment: String
  house: String!
  street: String!
}

input CreatePaymentDebitCardDto {
  cvv: String!
  expireDate: String!
  pan: String!
}

input CreatePaymentPersonDto {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

input CreatePaymentSeanceDto {
  date: String!
  time: String!
}

input CreatePaymentTicketsDto {
  column: Float!
  row: Float!
}

input CreatePizzaPaymentAddressDto {
  apartment: String!
  comment: String
  house: String!
  street: String!
}

input CreatePizzaPaymentDebitCardDto {
  cvv: String!
  expireDate: String!
  pan: String!
}

input CreatePizzaPaymentPersonDto {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

type DeliverResponse {
  order: DeliveryOrder!
  reason: String
  success: Boolean!
}

type DeliveryOption {
  days: Float!
  id: String!
  name: String!
  price: Float!
  type: DeliveryOptionType!
}

enum DeliveryOptionType {
  DEFAULT
  EXPRESS
}

input DeliveryOpttionInput {
  days: Float!
  id: String!
  name: String!
  price: Float!
  type: DeliveryOptionType!
}

type DeliveryOrder {
  _id: String!
  cancellable: Boolean!
  payer: Payer!
  receiver: DeliveryPerson!
  receiverAddress: DeliveryReceiverAddress!
  receiverPoint: DeliveryPoint!
  sender: DeliveryPerson!
  senderAddress: DeliverySenderAddress!
  senderPoint: DeliveryPoint!
  status: DeliveryStatus!
}

input DeliveryOrderInput {
  _id: String!
  cancellable: Boolean!
  payer: Payer!
  receiver: DeliveryPersonInput!
  receiverAddress: DeliveryReceiverAddressInput!
  receiverPoint: DeliveryPointInput!
  sender: DeliveryPersonInput!
  senderAddress: DeliverySenderAddressInput!
  senderPoint: DeliveryPointInput!
  status: DeliveryStatus!
}

type DeliveryOrderResponse {
  order: DeliveryOrder!
  reason: String
  success: Boolean!
}

type DeliveryOrdersResponse {
  orders: [DeliveryOrder!]!
  reason: String
  success: Boolean!
}

type DeliveryPackageType {
  height: Float!
  id: String!
  length: Float!
  name: String!
  weight: Float!
  width: Float!
}

input DeliveryPackageTypeInput {
  height: Float!
  id: String!
  length: Float!
  name: String!
  weight: Float!
  width: Float!
}

type DeliveryPackageTypesResponse {
  packages: [DeliveryPackageType!]!
  reason: String
  success: Boolean!
}

type DeliveryPerson {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

input DeliveryPersonInput {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

type DeliveryPoint {
  id: String!
  latitude: Float!
  longitude: Float!
  name: String!
}

input DeliveryPointInput {
  id: String!
  latitude: Float!
  longitude: Float!
  name: String!
}

type DeliveryPointsResponse {
  points: [DeliveryPoint!]!
  reason: String
  success: Boolean!
}

type DeliveryReceiverAddress {
  apartment: String!
  comment: String
  house: String!
  isNonContact: Boolean
  street: String!
}

input DeliveryReceiverAddressInput {
  apartment: String!
  comment: String
  house: String!
  isNonContact: Boolean
  street: String!
}

type DeliverySenderAddress {
  apartment: String!
  comment: String
  house: String!
  street: String!
}

input DeliverySenderAddressInput {
  apartment: String!
  comment: String
  house: String!
  street: String!
}

enum DeliveryStatus {
  CANCELED
  IN_PROCESSING
  ON_MY_WAY
  SUCCESS
  WAITING_COURIER
}

enum Dough {
  THICK
  THIN
}

type Film {
  actors: [FilmStaff!]!
  ageRating: Rating!
  country: Country
  description: String!
  directors: [FilmStaff!]!
  genres: [String!]!
  id: String!
  img: String!
  name: String!
  originalName: String!
  releaseDate: String!
  runtime: Float!
  userRatings: FilmUserRating!
}

type FilmHall {
  name: String!
  places: [[FilmHallCell!]!]!
}

type FilmHallCell {
  price: Float!
  type: FilmHallCellType!
}

input FilmHallCellInput {
  price: Float!
  type: FilmHallCellType!
}

enum FilmHallCellType {
  BLOCKED
  COMFORT
  ECONOM
  PAYED
}

input FilmHallInput {
  name: String!
  places: [[FilmHallCellInput!]!]!
}

input FilmInput {
  actors: [FilmStaffInput!]! = []
  ageRating: Rating!
  country: CountryInput
  description: String!
  directors: [FilmStaffInput!]! = []
  genres: [String!]! = []
  id: String!
  img: String!
  name: String!
  originalName: String!
  releaseDate: String!
  runtime: Float!
  userRatings: FilmUserRatingInput!
}

type FilmPerson {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

input FilmPersonInput {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

type FilmResponse {
  film: Film!
  reason: String
  success: Boolean!
}

type FilmSeance {
  hall: FilmHall!
  time: String!
}

input FilmSeanceInput {
  hall: FilmHallInput!
  time: String!
}

type FilmStaff {
  fullName: String!
  id: String!
  professions: [Profession!]!
}

input FilmStaffInput {
  fullName: String!
  id: String!
  professions: [Profession!]!
}

type FilmTicketSeance {
  date: String!
  time: String!
}

input FilmTicketSeanceInput {
  date: String!
  time: String!
}

enum FilmTicketStatus {
  CANCELED
  PAYED
}

type FilmUserRating {
  imdb: String!
  kinopoisk: String!
}

input FilmUserRatingInput {
  imdb: String!
  kinopoisk: String!
}

type FilmsResponse {
  films: [Film!]!
  reason: String
  success: Boolean!
}

enum Ingredient {
  BACON
  BASIL
  CHEDDAR
  CHICKEN_FILLET
  CHILE
  FETA
  GREEN_PEPPER
  HAM
  MEATBALLS
  MOZZARELLA
  MUSHROOMS
  ONION
  PARMESAN
  PEPERONI
  PICKLE
  PINEAPPLE
  SHRIMPS
  TOMATO
}

type Mutation {
  calculateDelivery(package: CalculateDeliveryPackageDto!, receiverPoint: CalculateDeliveryPointDto!, senderPoint: CalculateDeliveryPointDto!): CalculateDeliveryResponse!
  cancelCinemaOrder(orderId: String!): BaseResponse!
  cancelDeliveryOrder(orderId: String!): BaseResponse!
  cancelPizzaOrder(orderId: String!): BaseResponse!
  createCinemaPayment(debitCard: CreatePaymentDebitCardDto!, filmId: String!, person: CreatePaymentPersonDto!, seance: CreatePaymentSeanceDto!, tickets: [CreatePaymentTicketsDto!]!): PaymentResponse!
  createDeliveryOrder(option: CreateDeliveryOrderDeliveryOptionDto!, payer: Payer!, receiver: CreateDeliveryOrderPersonDto!, receiverAddress: CreateDeliveryOrderReceiverAddressDto!, receiverPoint: CreateDeliveryOrderPointDto!, sender: CreateDeliveryOrderPersonDto!, senderAddress: CreateDeliveryOrderSenderAddressDto!, senderPoint: CreateDeliveryOrderPointDto!): DeliverResponse!
  createOtp(phone: String!): OtpResponse!
  createPizzaPayment(debitCard: CreatePizzaPaymentDebitCardDto!, person: CreatePizzaPaymentPersonDto!, pizzas: [OrderedPizzaInput!]!, receiverAddress: CreatePizzaPaymentAddressDto!): PizzaPaymentResponse!
  signin(code: Float!, phone: String!): SignInResponse!
  updateProfile(phone: String!, profile: UpdateProfileProfileDto!): UpdateProfileResponse!
}

type OrderedPizza {
  doughs: PizzaDough!
  id: String!
  name: String!
  size: PizzaSize!
  toppings: [OrderedPizzaIngredient!]!
}

type OrderedPizzaIngredient {
  cost: Float!
  name: Ingredient!
}

input OrderedPizzaIngredientInput {
  cost: Float!
  name: Ingredient!
}

input OrderedPizzaInput {
  doughs: PizzaDoughInput!
  id: String!
  name: String!
  size: PizzaSizeInput!
  toppings: [OrderedPizzaIngredientInput!]!
}

type Otp {
  _id: String!
  code: Float!
  created: String!
  phone: String!
  retryDelay: Float!
}

input OtpInput {
  _id: String!
  code: Float!
  created: String!
  phone: String!
  retryDelay: Float!
}

type OtpResponse {
  reason: String
  retryDelay: Float!
  success: Boolean!
}

type PaginationMeta {
  limit: Float!
  page: Float!
  total: Float!
  totalPages: Float!
}

enum Payer {
  RECEIVER
  SENDER
}

type PaymentResponse {
  order: CinemaOrder!
  reason: String
  success: Boolean!
}

type Pizza {
  allergens: [String!]!
  calories: Float!
  carbohydrates: String!
  description: String!
  doughs: [PizzaDough!]!
  id: String!
  img: String!
  ingredients: [PizzaIngredient!]!
  isGlutenFree: Boolean!
  isHit: Boolean!
  isNew: Boolean!
  isVegetarian: Boolean!
  name: String!
  protein: String!
  sizes: [PizzaSize!]!
  sodium: String!
  toppings: [PizzaIngredient!]!
  totalFat: String!
}

type PizzaAddress {
  apartment: String!
  comment: String
  house: String!
  street: String!
}

input PizzaAddressInput {
  apartment: String!
  comment: String
  house: String!
  street: String!
}

type PizzaDough {
  name: Dough!
  price: Float!
}

input PizzaDoughInput {
  name: Dough!
  price: Float!
}

type PizzaIngredient {
  cost: Float!
  img: String!
  name: Ingredient!
}

input PizzaIngredientInput {
  cost: Float!
  img: String!
  name: Ingredient!
}

input PizzaInput {
  allergens: [String!]!
  calories: Float!
  carbohydrates: String!
  description: String!
  doughs: [PizzaDoughInput!]!
  id: String!
  img: String!
  ingredients: [PizzaIngredientInput!]!
  isGlutenFree: Boolean!
  isHit: Boolean!
  isNew: Boolean!
  isVegetarian: Boolean!
  name: String!
  protein: String!
  sizes: [PizzaSizeInput!]!
  sodium: String!
  toppings: [PizzaIngredientInput!]!
  totalFat: String!
}

type PizzaOrder {
  _id: String!
  cancellable: Boolean!
  person: PizzaPerson!
  pizzas: [OrderedPizza!]!
  receiverAddress: PizzaAddress!
  status: PizzaStatus!
}

input PizzaOrderInput {
  _id: String!
  cancellable: Boolean!
  person: PizzaPersonInput!
  pizzas: [OrderedPizzaInput!]!
  receiverAddress: PizzaAddressInput!
  status: PizzaStatus!
}

type PizzaOrderResponse {
  order: PizzaOrder!
  reason: String
  success: Boolean!
}

type PizzaOrdersResponse {
  orders: [PizzaOrder!]!
  reason: String
  success: Boolean!
}

type PizzaPaymentResponse {
  order: PizzaOrder!
  reason: String
  success: Boolean!
}

type PizzaPerson {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

input PizzaPersonInput {
  firstname: String!
  lastname: String!
  middlename: String
  phone: String!
}

type PizzaSize {
  name: Size!
  price: Float!
}

input PizzaSizeInput {
  name: Size!
  price: Float!
}

enum PizzaStatus {
  CANCELED
  IN_PROCESSING
  ON_MY_WAY
  SUCCESS
  WAITING_COURIER
}

type PizzasResponse {
  catalog: [Pizza!]!
  reason: String
  success: Boolean!
}

enum Profession {
  ACTOR
  DIRECTOR
}

type Query {
  getCars(bodyType: BodyType, brand: Brand, limit: Int = 10, maxPrice: Int, minPrice: Int, page: Int = 1, search: String, transmission: Transmission): CarsPaginatedResponse!
  getCinemaOrders: CinemaOrdersResponse!
  getCinemaToday: FilmsResponse!
  getDeliveryOrder(orderId: String!): DeliveryOrderResponse!
  getDeliveryOrders: DeliveryOrdersResponse!
  getDeliveryPackageTypes: DeliveryPackageTypesResponse!
  getDeliveryPoints: DeliveryPointsResponse!
  getFilm(filmId: String!): FilmResponse!
  getFilmSchedule(filmId: String!): ScheduleResponse!
  getPizzaOrder(orderId: String!): PizzaOrderResponse!
  getPizzaOrders: PizzaOrdersResponse!
  getPizzasCatalog: PizzasResponse!
  session: SessionResponse!
}

enum Rating {
  G
  NC17
  PG
  PG13
  R
}

type Schedule {
  date: String!
  seances: [FilmSeance!]!
}

type ScheduleResponse {
  reason: String
  schedules: [Schedule!]!
  success: Boolean!
}

type SessionResponse {
  reason: String
  success: Boolean!
  user: User!
}

type SignInResponse {
  reason: String
  success: Boolean!
  token: String!
  user: User!
}

enum Size {
  LARGE
  MEDIUM
  SMALL
}

type Ticket {
  _id: String!
  column: Float!
  filmId: String!
  phone: String!
  row: Float!
  seance: FilmTicketSeance!
  status: FilmTicketStatus!
}

input TicketInput {
  _id: String!
  column: Float!
  filmId: String!
  phone: String!
  row: Float!
  seance: FilmTicketSeanceInput!
  status: FilmTicketStatus!
}

enum Transmission {
  AUTOMATIC
  MANUAL
}

input UpdateProfileProfileDto {
  city: String
  email: String
  firstname: String
  lastname: String
  middlename: String
}

type UpdateProfileResponse {
  reason: String
  success: Boolean!
  user: User!
}

type User {
  _id: String!
  city: String
  email: String
  firstname: String
  lastname: String
  middlename: String
  phone: String!
}

input UserInput {
  _id: String!
  city: String
  email: String
  firstname: String
  lastname: String
  middlename: String
  phone: String!
}